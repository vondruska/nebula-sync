// Code generated by mockery v2.53.3. DO NOT EDIT.

package webhook

import mock "github.com/stretchr/testify/mock"

// WebhookClient is an autogenerated mock type for the WebhookClient type
type WebhookClient struct {
	mock.Mock
}

type WebhookClient_Expecter struct {
	mock *mock.Mock
}

func (_m *WebhookClient) EXPECT() *WebhookClient_Expecter {
	return &WebhookClient_Expecter{mock: &_m.Mock}
}

// Failure provides a mock function with no fields
func (_m *WebhookClient) Failure() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Failure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhookClient_Failure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Failure'
type WebhookClient_Failure_Call struct {
	*mock.Call
}

// Failure is a helper method to define mock.On call
func (_e *WebhookClient_Expecter) Failure() *WebhookClient_Failure_Call {
	return &WebhookClient_Failure_Call{Call: _e.mock.On("Failure")}
}

func (_c *WebhookClient_Failure_Call) Run(run func()) *WebhookClient_Failure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WebhookClient_Failure_Call) Return(_a0 error) *WebhookClient_Failure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebhookClient_Failure_Call) RunAndReturn(run func() error) *WebhookClient_Failure_Call {
	_c.Call.Return(run)
	return _c
}

// Success provides a mock function with no fields
func (_m *WebhookClient) Success() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Success")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhookClient_Success_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Success'
type WebhookClient_Success_Call struct {
	*mock.Call
}

// Success is a helper method to define mock.On call
func (_e *WebhookClient_Expecter) Success() *WebhookClient_Success_Call {
	return &WebhookClient_Success_Call{Call: _e.mock.On("Success")}
}

func (_c *WebhookClient_Success_Call) Run(run func()) *WebhookClient_Success_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WebhookClient_Success_Call) Return(_a0 error) *WebhookClient_Success_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebhookClient_Success_Call) RunAndReturn(run func() error) *WebhookClient_Success_Call {
	_c.Call.Return(run)
	return _c
}

// NewWebhookClient creates a new instance of WebhookClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookClient {
	mock := &WebhookClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
